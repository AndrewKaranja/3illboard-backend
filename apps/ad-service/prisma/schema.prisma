datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  advertisments Advertisment[]
  bookings      Booking[]
  createdAt     DateTime       @default(now())
  email         String         @unique
  firstName     String?
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  lastLogin     DateTime
  lastName      String?
  notifications Notification[]
  password      String
  ratings       Rating[]
  roles         Json
  spaces        Space[]
  transactions  Transaction[]
  updatedAt     DateTime       @updatedAt
  username      String         @unique
}

model Space {
  advertisments Advertisment[]
  availability  Json?
  bookings      Booking[]
  createdAt     DateTime       @default(now())
  description   String?
  dimensions    String
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  location      String?
  ownerId       String?
  photos        Json?
  price         Float?
  ratings       Rating[]
  spaceContact  String?
  spaceId       String         @unique
  spaceType     String?
  updatedAt     DateTime       @updatedAt
  user          User?          @relation(fields: [userId], references: [id])
  userId        String?        @db.ObjectId
}

model Advertisment {
  adId         String?
  advertiserId String?
  content      String?
  createdAt    DateTime @default(now())
  duration     String?
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  space        Space?   @relation(fields: [spaceId], references: [id])
  spaceId      String?  @db.ObjectId
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
}

model Booking {
  adId         String?
  advertiserId String?
  bookingId    String?
  createdAt    DateTime      @default(now())
  endDate      DateTime?
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  space        Space?        @relation(fields: [spaceId], references: [id])
  spaceId      String?       @db.ObjectId
  startDate    DateTime?
  totalPrice   Float?
  transactions Transaction[]
  updatedAt    DateTime      @updatedAt
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?       @db.ObjectId
}

model Transaction {
  advertiserId    String?
  amount          String?
  booking         Booking?               @relation(fields: [bookingId], references: [id])
  bookingId       String?                @db.ObjectId
  createdAt       DateTime               @default(now())
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  status          EnumTransactionStatus?
  transactionDate DateTime?
  transactionId   String?
  updatedAt       DateTime               @updatedAt
  user            User?                  @relation(fields: [userId], references: [id])
  userId          String?                @db.ObjectId
}

model Rating {
  advertiserId String?
  comment      String?
  createdAt    DateTime @default(now())
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  rating       Int?
  reviewId     String?
  space        Space?   @relation(fields: [spaceId], references: [id])
  spaceId      String?  @db.ObjectId
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
}

model Notification {
  content   String?
  createdAt DateTime                @default(now())
  date      DateTime?
  id        String                  @id @default(auto()) @map("_id") @db.ObjectId
  status    EnumNotificationStatus?
  updatedAt DateTime                @updatedAt
  user      User?                   @relation(fields: [userId], references: [id])
  userId    String?                 @db.ObjectId
}

enum EnumTransactionStatus {
  Option1
}

enum EnumNotificationStatus {
  Option1
}
