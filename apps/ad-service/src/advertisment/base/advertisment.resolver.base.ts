/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAdvertismentArgs } from "./CreateAdvertismentArgs";
import { UpdateAdvertismentArgs } from "./UpdateAdvertismentArgs";
import { DeleteAdvertismentArgs } from "./DeleteAdvertismentArgs";
import { AdvertismentCountArgs } from "./AdvertismentCountArgs";
import { AdvertismentFindManyArgs } from "./AdvertismentFindManyArgs";
import { AdvertismentFindUniqueArgs } from "./AdvertismentFindUniqueArgs";
import { Advertisment } from "./Advertisment";
import { Space } from "../../space/base/Space";
import { User } from "../../user/base/User";
import { AdvertismentService } from "../advertisment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Advertisment)
export class AdvertismentResolverBase {
  constructor(
    protected readonly service: AdvertismentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Advertisment",
    action: "read",
    possession: "any",
  })
  async _advertismentsMeta(
    @graphql.Args() args: AdvertismentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Advertisment])
  @nestAccessControl.UseRoles({
    resource: "Advertisment",
    action: "read",
    possession: "any",
  })
  async advertisments(
    @graphql.Args() args: AdvertismentFindManyArgs
  ): Promise<Advertisment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Advertisment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Advertisment",
    action: "read",
    possession: "own",
  })
  async advertisment(
    @graphql.Args() args: AdvertismentFindUniqueArgs
  ): Promise<Advertisment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Advertisment)
  @nestAccessControl.UseRoles({
    resource: "Advertisment",
    action: "create",
    possession: "any",
  })
  async createAdvertisment(
    @graphql.Args() args: CreateAdvertismentArgs
  ): Promise<Advertisment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        space: args.data.space
          ? {
              connect: args.data.space,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Advertisment)
  @nestAccessControl.UseRoles({
    resource: "Advertisment",
    action: "update",
    possession: "any",
  })
  async updateAdvertisment(
    @graphql.Args() args: UpdateAdvertismentArgs
  ): Promise<Advertisment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          space: args.data.space
            ? {
                connect: args.data.space,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Advertisment)
  @nestAccessControl.UseRoles({
    resource: "Advertisment",
    action: "delete",
    possession: "any",
  })
  async deleteAdvertisment(
    @graphql.Args() args: DeleteAdvertismentArgs
  ): Promise<Advertisment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Space, {
    nullable: true,
    name: "space",
  })
  @nestAccessControl.UseRoles({
    resource: "Space",
    action: "read",
    possession: "any",
  })
  async resolveFieldSpace(
    @graphql.Parent() parent: Advertisment
  ): Promise<Space | null> {
    const result = await this.service.getSpace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Advertisment
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
